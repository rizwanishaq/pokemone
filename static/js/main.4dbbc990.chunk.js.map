{"version":3,"sources":["components/Pokecard.js","components/Pokedex.js","components/Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","id","name","type","exp","className","src","slice","alt","Pokedex","pokemon","title","isWinner","map","p","key","base_experience","Pokegame","useState","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAmBeA,MAhBf,YAA4C,IAGzBC,EAHCC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IAIlC,OACE,yBAAKC,UAAU,YACb,wBAAIA,UAAU,kBAAkBH,GAChC,yBAAKG,UAAU,kBACb,yBAAKC,IAAG,UAPG,8DAOH,QALGN,EAKwBC,EALbD,GAAU,IAAM,YAAKA,GAASO,OAAO,GAAKP,GAKxD,QAAsCQ,IAAKN,KAErD,yBAAKG,UAAU,iBAAf,SAAsCF,GACtC,yBAAKE,UAAU,iBAAf,QAAqCD,KCe5BK,MAzBf,YAA8C,IAA3BC,EAA0B,EAA1BA,QAASN,EAAiB,EAAjBA,IACtBO,EADuC,EAAZC,SAE7B,wBAAIP,UAAU,kBAAd,gBAEA,wBAAIA,UAAU,iBAAd,eAEF,OACE,yBAAKA,UAAU,WACZM,EACD,iDAAuBP,GACvB,yBAAKC,UAAU,iBACZK,EAAQG,KAAI,SAAAC,GAAC,OACZ,kBAAC,EAAD,CACEC,IAAKD,EAAEb,GACPA,GAAIa,EAAEb,GACNC,KAAMY,EAAEZ,KACRC,KAAMW,EAAEX,KACRC,IAAKU,EAAEE,wBCWJC,MA7Bf,WAcE,IAdkB,MAEYC,mBAAS,CACrC,CAAEjB,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQa,gBAAiB,IAC5D,CAAEf,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASa,gBAAiB,IAC3D,CAAEf,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOa,gBAAiB,IACzD,CAAEf,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,KAC/D,CAAEf,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYa,gBAAiB,KAC9D,CAAEf,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,IAC/D,CAAEf,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUa,gBAAiB,KAC3D,CAAEf,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUa,gBAAiB,MAV3C,mBAEXN,EAFW,KAYdS,GAZc,KAYN,IACRC,EAAK,YAAOV,GACTS,EAAME,OAASD,EAAMC,QAAQ,CAClC,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAcN,EAAMO,OAAOL,EAAS,GAAG,GAC3CH,EAAMS,KAAKF,GAEb,IAAIG,EAAOV,EAAMW,QAAO,SAAC1B,EAAKM,GAAN,OAAkBN,EAAMM,EAAQM,kBAAiB,GACrEe,EAAOX,EAAMU,QAAO,SAAC1B,EAAKM,GAAN,OAAkBN,EAAMM,EAAQM,kBAAiB,GACzE,OACE,6BACE,kBAAC,EAAD,CAASN,QAASS,EAAOf,IAAKyB,EAAMjB,SAAUiB,EAAOE,IACrD,kBAAC,EAAD,CAASrB,QAASU,EAAOhB,IAAK2B,EAAMnB,SAAUmB,EAAOF,MCf5CG,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4dbbc990.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Pokecard.css\";\n\nfunction Pokecard({ id, name, type, exp }) {\n  const POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\n  let padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\n  return (\n    <div className=\"Pokecard\">\n      <h1 className=\"Pokecard-title\">{name}</h1>\n      <div className=\"Pokecard-image\">\n        <img src={`${POKE_API}${padToThree(id)}.png`} alt={name} />\n      </div>\n      <div className=\"Pokecard-data\">Type: {type}</div>\n      <div className=\"Pokecard-data\">EXP: {exp}</div>\n    </div>\n  );\n}\n\nexport default Pokecard;\n","import React from \"react\";\nimport \"./Pokedex.css\";\nimport Pokecard from \"./Pokecard\";\n\nfunction Pokedex({ pokemon, exp, isWinner }) {\n  let title = isWinner ? (\n    <h1 className=\"Pokedex-winner\">Winning Hand</h1>\n  ) : (\n    <h1 className=\"Pokedex-loser\">Losing Hand</h1>\n  );\n  return (\n    <div className=\"Pokedex\">\n      {title}\n      <h4>Total Experience: {exp}</h4>\n      <div className=\"Pokedex-cards\">\n        {pokemon.map(p => (\n          <Pokecard\n            key={p.id}\n            id={p.id}\n            name={p.name}\n            type={p.type}\n            exp={p.base_experience}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Pokedex;\n","import React, { useState } from \"react\";\nimport Pokedex from \"./Pokedex\";\n\nfunction Pokegame() {\n  // eslint-disable-next-line\n  const [pokemon, setPokemon] = useState([\n    { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n    { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n    { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n    { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n    { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n    { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n    { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n    { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\n  ]);\n  let hand1 = [];\n  let hand2 = [...pokemon];\n  while (hand1.length < hand2.length) {\n    let randIdx = Math.floor(Math.random() * hand2.length);\n    let randPokemon = hand2.splice(randIdx, 1)[0];\n    hand1.push(randPokemon);\n  }\n  let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n  let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n  return (\n    <div>\n      <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n      <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n    </div>\n  );\n}\n\nexport default Pokegame;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pokegame from \"./components/Pokegame\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}